<h3><%= @job_search_jobtitle %> Jobs Available in  <%= @job_search_state %>:</h3>


<% if @results[0].any? %>
	<ul>
	<% @results.each do |result| %>
		<% result["JobSearchResult"].each do |job| %>
			<li>
				<p><strong>Job:</strong> <a href='<%= job["JobDetailsURL"][0] %>'><%= job["JobTitle"][0].capitalize %> &mdash; <%= job["EmploymentType"][0] %></a></p>
				<p><strong>Company:</strong> <a href='<%= job["CompanyDetailsURL"][0] %>'><%= job["Company"][0] %></a></p>
				<p><strong>Description:</strong> <%= job["DescriptionTeaser"][0] %></p>
			</li>
		<% end %>
	<% end %>
	</ul>
<% else %>
<p>Sorry there are no <%= @job_title %> Jobs Available in  <%= @state %></p>

<% end %>

<!-- /////my stuff -->
<% if @results[0].any? %>
<% @markers=[] %>
<% @output.each do |result| %>
	<% result["JobSearchResult"].each do |final| %>
 		<% final["Company"] %>
 		<% @lat =final["LocationLatitude"][0].to_f %>
 		<% @lng =final["LocationLongitude"][0].to_f %>
 		<% final["JobTitle"][0] %>
 		<br>
 		<% @markers << {lat: @lat, lng: @lng}%>
    	<%  @markers.to_json.html_safe %> 
 	<% end %>			
 <% end %>
 <% end %>



<html> 
<head> 
<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
   <style type="text/css">
      html { height: 100% }
      body { height: 100%; margin: 0; padding: 0 }
      #map_canvas { height: 100% }
    </style>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"/> 
<title>Google Maps JavaScript API v3 Example: Markers, Info Window and StreetView</title> 
<link href="http://code.google.com/apis/maps/documentation/javascript/examples/default.css" rel="stylesheet" type="text/css" /> 
<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script> 
<script type="text/javascript"> 
  function initialize() {

    // Create the map 
    // No need to specify zoom and center as we fit the map further down.
    var map = new google.maps.Map(document.getElementById("map_canvas"), {
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      streetViewControl: false
    });
 
    // Create the shared infowindow with two DIV placeholders
    // One for a text string, the other for the StreetView panorama.
    var content = document.createElement("DIV");
    var title = document.createElement("DIV");
    content.appendChild(title);
    var streetview = document.createElement("DIV");
    streetview.style.width = "400px";
    streetview.style.height = "400px";
    content.appendChild(streetview);
    var infowindow = new google.maps.InfoWindow({
   content: content
    });

    // Define the list of markers.
    // This could be generated server-side with a script creating the array.
    // var markers = [
    //   { lat: -33.85, lng: 151.05, name: "marker 1" },
    //   { lat: -33.90, lng: 151.10, name: "marker 2" },
    //   { lat: -33.95, lng: 151.15, name: "marker 3" },
    //   { lat: -33.85, lng: 151.15, name: "marker 4" },
    //   { lat: -33.20, lng: 151.75, name: "marker 5" }

    // ];

    var markers = <%= @markers.to_json.html_safe %>;
 
    	

    // Create the markers
    for (index in markers) addMarker(markers[index]);
    function addMarker(data) {
   var marker = new google.maps.Marker({
  position: new google.maps.LatLng(data.lat, data.lng),
  map: map,
        title: data.name
   });
   google.maps.event.addListener(marker, "click", function() {
  openInfoWindow(marker);
   });
    }

    // Zoom and center the map to fit the markers
    // This logic could be conbined with the marker creation.
    // Just keeping it separate for code clarity.
    var bounds = new google.maps.LatLngBounds();
    for (index in markers) {
   var data = markers[index];
   bounds.extend(new google.maps.LatLng(data.lat, data.lng));
 }
 map.fitBounds(bounds);

    // Handle the DOM ready event to create the StreetView panorama
    // as it can only be created once the DIV inside the infowindow is loaded in the DOM.
    var panorama = null;
    var pin = new google.maps.MVCObject();
    google.maps.event.addListenerOnce(infowindow, "domready", function() {
      panorama = new google.maps.StreetViewPanorama(streetview, {
       navigationControl: false,
       enableCloseButton: false,
       addressControl: false,
       linksControl: false,
       visible: true
      });
      panorama.bindTo("position", pin);
    });
    
    // Set the infowindow content and display it on marker click.
    // Use a 'pin' MVCObject as the order of the domready and marker click events is not garanteed.
    function openInfoWindow(marker) {
   title.innerHTML = marker.getTitle();
   pin.set("position", marker.getPosition());
   infowindow.open(map, marker);
    }
  }
</script> 
</head> 
<body onload="initialize()"> 
  <div id="map_canvas" style="width:100%; height:100%"></div> 
</body> 
</html>

